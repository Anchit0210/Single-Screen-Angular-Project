{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class PersonService {\n  constructor() {\n    this.people = [{\n      id: 1,\n      name: 'Anchit',\n      age: 25\n    }, {\n      id: 2,\n      name: 'Jane',\n      age: 30\n    }, {\n      id: 2,\n      name: 'Jane',\n      age: 30\n    }, {\n      id: 3,\n      name: 'Bob',\n      age: 35\n    }];\n  }\n  getAllPeople() {\n    return this.people;\n  }\n  getPersonById(id) {\n    return this.people.find(person => person.id === id);\n  }\n  updatePerson(person) {\n    const index = this.people.findIndex(p => p.id === person.id);\n    if (index !== -1) {\n      this.people[index] = person;\n    }\n  }\n  deletePerson(id) {\n    this.people = this.people.filter(person => person.id !== id);\n  }\n}\nPersonService.ɵfac = function PersonService_Factory(t) {\n  return new (t || PersonService)();\n};\nPersonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PersonService,\n  factory: PersonService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["PersonService","constructor","people","id","name","age","getAllPeople","getPersonById","find","person","updatePerson","index","findIndex","p","deletePerson","filter","factory","ɵfac","providedIn"],"sources":["D:\\Web Dev Projects\\Right Doctor Angular Project 2\\people-management-app\\src\\app\\person.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Person } from './person.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersonService {\n  private people: Person[] = [\n    { id: 1, name: 'Anchit', age: 25 },\n    { id: 2, name: 'Jane', age: 30 },\n    { id: 2, name: 'Jane', age: 30 },\n    { id: 3, name: 'Bob', age: 35 }\n  ];\n\n  getAllPeople(): Person[] {\n    return this.people;\n  }\n\n  getPersonById(id: number): Person | undefined {\n    return this.people.find(person => person.id === id);\n  }\n\n  updatePerson(person: Person): void {\n    const index = this.people.findIndex(p => p.id === person.id);\n    if (index !== -1) {\n      this.people[index] = person;\n    }\n  }\n\n  deletePerson(id: number): void {\n    this.people = this.people.filter(person => person.id !== id);\n  }\n}\n"],"mappings":";AAMA,OAAM,MAAOA,aAAa;EAH1BC,YAAA;IAIU,KAAAC,MAAM,GAAa,CACzB;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,QAAQ;MAAEC,GAAG,EAAE;IAAE,CAAE,EAClC;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAE,CAAE,EAChC;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAE,CAAE,EAChC;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAE,CAAE,CAChC;;EAEDC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACJ,MAAM;EACpB;EAEAK,aAAaA,CAACJ,EAAU;IACtB,OAAO,IAAI,CAACD,MAAM,CAACM,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACN,EAAE,KAAKA,EAAE,CAAC;EACrD;EAEAO,YAAYA,CAACD,MAAc;IACzB,MAAME,KAAK,GAAG,IAAI,CAACT,MAAM,CAACU,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKM,MAAM,CAACN,EAAE,CAAC;IAC5D,IAAIQ,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACT,MAAM,CAACS,KAAK,CAAC,GAAGF,MAAM;;EAE/B;EAEAK,YAAYA,CAACX,EAAU;IACrB,IAAI,CAACD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACa,MAAM,CAACN,MAAM,IAAIA,MAAM,CAACN,EAAE,KAAKA,EAAE,CAAC;EAC9D;;AAzBWH,aAAa,C;mBAAbA,aAAa;AAAA;AAAbA,aAAa,C;SAAbA,aAAa;EAAAgB,OAAA,EAAbhB,aAAa,CAAAiB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}